# -*- coding: utf-8 -*-
# Generated by Django 1.9.3 on 2016-03-06 14:54
from __future__ import unicode_literals

import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GuideRNA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grna', models.CharField(max_length=20, null=True)),
                ('genome_position', models.BigIntegerField(default=-1, null=True)),
                ('target_position', models.BigIntegerField(default=-1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Nuclease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Cas9', max_length=10)),
                ('is_nickase', models.BooleanField(default=True)),
                ('is_downstream', models.BooleanField(default=True)),
                ('cut_offset', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='PAM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pam', models.CharField(max_length=20)),
                ('nuclease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grna.Nuclease')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('fasta_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/grna/genomes'), upload_to=b'')),
                ('genbank_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/grna/genomes'), upload_to=b'')),
                ('length', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('sequence_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/grna/targets'), upload_to=b'')),
                ('position', models.IntegerField(validators=[django.core.validators.MinValueValidator(-1)])),
                ('upstream', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('downstream', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.AddField(
            model_name='guiderna',
            name='nuclease',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='grna.Nuclease'),
        ),
        migrations.AddField(
            model_name='guiderna',
            name='pam',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='grna.PAM'),
        ),
        migrations.AddField(
            model_name='guiderna',
            name='species',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='grna.Species'),
        ),
        migrations.AddField(
            model_name='guiderna',
            name='target',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='grna.Target'),
        ),
        migrations.AlterUniqueTogether(
            name='pam',
            unique_together=set([('nuclease', 'pam')]),
        ),
        migrations.AlterUniqueTogether(
            name='guiderna',
            unique_together=set([('species', 'nuclease', 'target', 'pam')]),
        ),
    ]
